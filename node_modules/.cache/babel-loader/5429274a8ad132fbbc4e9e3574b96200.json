{"ast":null,"code":"var _jsxFileName = \"/home/devhorse/Main/projects/miner/miner-game/src/game.js\";\nimport React from 'react';\nimport Board from './board';\nimport AsideMenu from './aside-menu';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      boardWidth: 0,\n      cells: {},\n      mines: {}\n    };\n\n    this.handleClick = id => {\n      let currentCell = this.state.cells[id];\n\n      if (!currentCell.opened) {\n        if (!currentCell.flagged) {\n          if (currentCell.mined) {\n            console.log('gameOver');\n          } else {\n            currentCell.opened = true;\n\n            if (!currentCell.minesAround > 0) {\n              let cellsAround = 0; // need get cellsAround function\n            }\n          }\n        }\n      } // console.log(currentCell);\n\n\n      this.setState({\n        cells: { ...this.state.cells,\n          [id]: currentCell\n        }\n      });\n    };\n\n    this.gameInit = () => {\n      const sizes = this.getBoardAndCellSize();\n      const newBoardWidth = sizes.boardWidth;\n      const minesObject = this.getRandomMines();\n      const cellsObject = this.getCells(minesObject);\n\n      for (let cell of Object.keys(cellsObject)) {\n        if (!cellsObject[cell].mined) {\n          const newMinesAround = this.getMinesOrCellsAround(cellsObject, cell, minesObject, 'mines');\n          cellsObject[cell].minesAround = newMinesAround;\n        }\n      }\n\n      this.setState({\n        boardWidth: newBoardWidth,\n        cellSize: sizes.cellSize,\n        cells: cellsObject,\n        mines: minesObject\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.boardWidth === 0) {\n      this.gameInit();\n    }\n  }\n\n  getBoardAndCellSize() {\n    let newCellSize = 90;\n\n    if (this.props.gameDifficult.width === '16') {\n      newCellSize = 45;\n    } else if (this.props.gameDifficult.width === '30') {\n      newCellSize = 35;\n    }\n\n    return {\n      cellSize: newCellSize,\n      boardWidth: +this.props.gameDifficult.width * newCellSize + this.props.gameDifficult.width * 2\n    };\n  }\n\n  getRandomMines() {\n    let mines = 0;\n\n    if (this.props.gameDifficult.width === '8') {\n      mines = 10;\n    } else if (this.props.gameDifficult.width === '16') {\n      mines = 40;\n    } else if (this.props.gameDifficult.width === '30') {\n      mines = 99;\n    }\n\n    let minesObject = {};\n\n    for (let i = 1; i <= mines; i++) {\n      let randomCol = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n      let randomRow = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n\n      while (minesObject[randomCol + '/' + randomRow]) {\n        randomCol = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n        randomRow = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n      }\n\n      ;\n      minesObject[randomCol + '/' + randomRow] = true;\n    }\n\n    return minesObject;\n  }\n\n  getCells(minesObject) {\n    let cellsObject = {};\n\n    for (let row = 1; row <= this.props.gameDifficult.height; row++) {\n      for (let col = 1; col <= this.props.gameDifficult.width; col++) {\n        let isMined = minesObject[col + '/' + row] ? true : false;\n        cellsObject[col + '/' + row] = {\n          id: col + '/' + row,\n          row: row,\n          col: col,\n          mined: isMined,\n          opened: false,\n          flagged: false,\n          minesAround: 0\n        };\n      }\n    }\n\n    return cellsObject;\n  }\n\n  getMinesOrCellsAround(cellsObject, cell, minesObject, mode) {\n    let row = cellsObject[cell].row;\n    let col = cellsObject[cell].col;\n    let arroundCells = [col + 1 + '/' + row, col - 1 + '/' + row, col + '/' + (row + 1), col + '/' + (row - 1), col + 1 + '/' + (row + 1), col - 1 + '/' + (row - 1), col + 1 + '/' + (row - 1), col - 1 + '/' + (row + 1)];\n    let newMinesAround = 0;\n    arroundCells = arroundCells.filter(item => {\n      let reg = new RegExp(`^(0\\/)|(\\/0)|(${+this.props.gameDifficult.width + 1}\\/)|(\\/${+this.props.gameDifficult.height + 1})`, 'g');\n\n      if (!item.match(reg)) {\n        if (mode === 'mines') {\n          newMinesAround = minesObject[item] ? newMinesAround += 1 : newMinesAround;\n        }\n      } else {\n        if (mode === 'mines') {\n          newMinesAround = newMinesAround;\n        }\n      }\n    });\n\n    if (mode === 'mines') {\n      return newMinesAround;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      gameState: this.state,\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(AsideMenu, {\n      handleGameStatus: this.props.handleGameStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/devhorse/Main/projects/miner/miner-game/src/game.js"],"names":["React","Board","AsideMenu","Game","Component","constructor","props","state","boardWidth","cells","mines","handleClick","id","currentCell","opened","flagged","mined","console","log","minesAround","cellsAround","setState","gameInit","sizes","getBoardAndCellSize","newBoardWidth","minesObject","getRandomMines","cellsObject","getCells","cell","Object","keys","newMinesAround","getMinesOrCellsAround","cellSize","componentDidMount","newCellSize","gameDifficult","width","i","randomCol","Math","floor","random","randomRow","height","row","col","isMined","mode","arroundCells","filter","item","reg","RegExp","match","render","handleGameStatus"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './board';\nimport AsideMenu from './aside-menu';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  state = {\n    boardWidth: 0,\n    cells: {},\n    mines: {}\n  }\n\n  componentDidMount() {\n    if (this.state.boardWidth === 0) {\n      this.gameInit();\n    }\n  }\n\n  handleClick = (id) => {\n    \n    let currentCell = this.state.cells[id];\n\n    if (!currentCell.opened) {\n      if (!currentCell.flagged) {\n        if (currentCell.mined) {\n          console.log('gameOver');\n        } else {\n          currentCell.opened = true;\n\n          if (!currentCell.minesAround > 0) {\n            let cellsAround = 0; // need get cellsAround function\n          }\n        }\n      }\n    }\n\n    \n    // console.log(currentCell);\n  \n    this.setState({\n      cells: {\n        ...this.state.cells,\n        [id]: currentCell\n      } \n    })\n\n  }\n\n  gameInit = () => {\n    const sizes = this.getBoardAndCellSize();\n    const newBoardWidth = sizes.boardWidth;\n    const minesObject = this.getRandomMines();\n    const cellsObject = this.getCells(minesObject);\n\n   \n    for (let cell of Object.keys(cellsObject)) {\n        if (!cellsObject[cell].mined) {\n\n          const newMinesAround = this.getMinesOrCellsAround(cellsObject, cell, minesObject, 'mines');\n          cellsObject[cell].minesAround = newMinesAround;\n        }\n    }\n   \n      \n    this.setState({\n      boardWidth: newBoardWidth,\n      cellSize: sizes.cellSize,\n      cells: cellsObject,\n      mines: minesObject\n    });\n  }\n\n  getBoardAndCellSize() {\n    let newCellSize = 90;\n\n    if (this.props.gameDifficult.width === '16') {\n      newCellSize = 45;\n    }  else if (this.props.gameDifficult.width === '30') {\n      newCellSize = 35;\n    }\n  \n    return {\n      cellSize: newCellSize,\n      boardWidth: +this.props.gameDifficult.width * newCellSize + (this.props.gameDifficult.width * 2)\n    }    \n  }\n\n  getRandomMines() {\n\n    let mines = 0;\n\n    if (this.props.gameDifficult.width === '8') {\n      mines = 10;\n    } else if (this.props.gameDifficult.width === '16') {\n      mines = 40;\n    } else if (this.props.gameDifficult.width === '30') {\n      mines = 99;\n    }\n\n    let minesObject = {};\n\n    for (let i = 1; i <= mines; i++) {\n      let randomCol = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n      let randomRow = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n      while (minesObject[randomCol + '/' + randomRow]) {\n        randomCol = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n        randomRow = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n      };\n      minesObject[randomCol + '/' + randomRow] = true;\n    }\n\n    return minesObject;\n  }\n\n  getCells(minesObject) {\n\n    let cellsObject = {};\n\n    for (let row = 1; row <= this.props.gameDifficult.height; row++) {\n      for (let col = 1; col <= this.props.gameDifficult.width; col++) {\n        let isMined = minesObject[col + '/' + row] ? true : false;\n\n        cellsObject[col + '/' + row] = {\n          id: col + '/' + row,\n          row: row,\n          col: col,\n          mined: isMined,\n          opened: false,\n          flagged: false,\n          minesAround: 0\n        };\n      }\n    }\n\n    return cellsObject;\n  }\n\n  getMinesOrCellsAround(cellsObject, cell, minesObject, mode) {\n    let row = cellsObject[cell].row;\n    let col = cellsObject[cell].col;\n    \n    let arroundCells = [\n      (col + 1) + '/' + (row),\n      (col - 1) + '/' + (row),\n      (col) + '/' + (row + 1),\n      (col) + '/' + (row - 1),\n      (col + 1) + '/' + (row + 1),\n      (col - 1) + '/' + (row - 1),\n      (col + 1) + '/' + (row - 1),\n      (col - 1) + '/' + (row + 1)\n    ];\n\n    let newMinesAround = 0;\n\n    arroundCells = arroundCells.filter(item => {\n\n      let reg = new RegExp(\n        `^(0\\/)|(\\/0)|(${+this.props.gameDifficult.width + 1}\\/)|(\\/${+this.props.gameDifficult.height + 1})`,\n        'g'\n      );\n  \n      if (!item.match(reg)) {\n        if (mode === 'mines') {\n          newMinesAround = minesObject[item] ?  newMinesAround += 1 : newMinesAround;\n        }\n      } else {\n        if (mode === 'mines') {\n          newMinesAround = newMinesAround;\n        }\n      }\n    });\n   \n    if (mode === 'mines') {\n      return newMinesAround;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Board gameState={this.state} handleClick={this.handleClick}/>\n        <AsideMenu handleGameStatus={this.props.handleGameStatus} />\n      </div>\n    );\n  }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}