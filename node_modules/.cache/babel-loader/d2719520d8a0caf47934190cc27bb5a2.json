{"ast":null,"code":"var _jsxFileName = \"/home/devhorse/Main/projects/miner/miner-game/src/board.js\";\nimport React from 'react';\nimport Ceil from './ceil';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      ceils: {},\n      boardWidth: 0,\n      ceilSize: 0\n    };\n\n    this.gameInit = () => {\n      async function init() {\n        let newCeilSize = 90;\n\n        if (this.props.gameDifficult.width === '16') {\n          newCeilSize = 45;\n        } else if (this.props.gameDifficult.width === '30') {\n          newCeilSize = 35;\n        }\n\n        let newBoardWidth = +this.props.gameDifficult.width * newCeilSize + this.props.gameDifficult.width * 2;\n        let mines = 0;\n\n        if (this.props.gameDifficult.width === '8') {\n          mines = 10;\n        } else if (this.props.gameDifficult.width === '16') {\n          mines = 40;\n        } else if (this.props.gameDifficult.width === '30') {\n          mines = 99;\n        }\n\n        let minesObject = {};\n\n        for (let i = 1; i <= mines; i++) {\n          let randomWidth = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n          let randomHeight = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n          minesObject[randomWidth + '/' + randomHeight] = {\n            mine: true\n          };\n        }\n\n        let ceilsObject = {};\n\n        for (let i = 1; i <= this.props.gameDifficult.height; i++) {\n          for (let j = 1; j <= this.props.gameDifficult.width; j++) {\n            let isMined = (await minesObject[j + '/' + i]) ? true : false;\n            ceilsObject[j + '/' + i] = {\n              cords: [j, i],\n              mined: isMined,\n              minesArround: null,\n              opened: false\n            };\n          }\n        } // minesArray.forEach((mine) => {\n        //   ceilsObject[mine[0] + '/' + mine[1]].mined = true;      \n        // });\n        // for (let key of Object.keys(ceilsObject)) {\n        //   if (!ceilsObject[key].mined) {\n        //     let col = ceilsObject[key].cords[0];\n        //     let row = ceilsObject[key].cords[1];\n        //   }\n        // }\n\n\n        this.setState({\n          ceils: ceilsObject,\n          boardWidth: newBoardWidth,\n          ceilSize: newCeilSize\n        });\n      }\n\n      init.bind(this);\n    };\n\n    this.getCeil = () => {\n      let ceilArray = [];\n      let f = 0;\n\n      for (let key of Object.keys(this.state.ceils)) {\n        f = this.state.ceils[key].mined ? f + 1 : f;\n        ceilArray.push( /*#__PURE__*/React.createElement(Ceil, {\n          key: key,\n          ceilCords: key,\n          ceilOptions: this.state.ceils[key],\n          styleOptions: {\n            width: this.state.ceilSize,\n            height: this.state.ceilSize\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      console.log(f);\n      return ceilArray;\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.boardWidth === 0) {\n      this.gameInit();\n    }\n  }\n\n  render() {\n    // console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      style: {\n        width: `${this.state.boardWidth}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, this.state.boardWidth ? this.getCeil() : null);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/devhorse/Main/projects/miner/miner-game/src/board.js"],"names":["React","Ceil","Board","Component","constructor","props","state","ceils","boardWidth","ceilSize","gameInit","init","newCeilSize","gameDifficult","width","newBoardWidth","mines","minesObject","i","randomWidth","Math","floor","random","randomHeight","height","mine","ceilsObject","j","isMined","cords","mined","minesArround","opened","setState","bind","getCeil","ceilArray","f","key","Object","keys","push","console","log","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Ceil from './ceil';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  state = {\n    ceils: {},\n    boardWidth: 0,\n    ceilSize: 0\n  }\n\n  componentDidMount() {\n    if (this.state.boardWidth === 0) {\n      this.gameInit();\n    }\n  }\n\n  gameInit = () => {\n\n    async function init() {\n      let newCeilSize = 90;\n\n      if (this.props.gameDifficult.width === '16') {\n        newCeilSize = 45;\n      }  else if (this.props.gameDifficult.width === '30') {\n        newCeilSize = 35;\n      }\n    \n      let newBoardWidth = +this.props.gameDifficult.width * newCeilSize + (this.props.gameDifficult.width * 2);\n\n      let mines = 0;\n      if (this.props.gameDifficult.width === '8') {\n        mines = 10;\n      } else if (this.props.gameDifficult.width === '16') {\n        mines = 40;\n      } else if (this.props.gameDifficult.width === '30') {\n        mines = 99;\n      }\n\n      let minesObject = {};\n\n      for (let i = 1; i <= mines; i++) {\n        let randomWidth = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n        let randomHeight = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n        minesObject[randomWidth + '/' + randomHeight] = {\n          mine: true\n        };\n      }\n\n      let ceilsObject = {};\n\n      for (let i = 1; i <= this.props.gameDifficult.height; i++) {\n        for (let j = 1; j <= this.props.gameDifficult.width; j++) {\n          let isMined = await minesObject[j + '/' + i] ? true : false;\n\n          ceilsObject[j + '/' + i] = {\n            cords: [j, i],\n            mined: isMined,\n            minesArround: null,\n            opened: false\n          };\n        }\n      }\n    \n      // minesArray.forEach((mine) => {\n      //   ceilsObject[mine[0] + '/' + mine[1]].mined = true;      \n      // });\n\n      // for (let key of Object.keys(ceilsObject)) {\n      //   if (!ceilsObject[key].mined) {\n      //     let col = ceilsObject[key].cords[0];\n      //     let row = ceilsObject[key].cords[1];\n      //   }\n      // }\n\n      this.setState({\n        ceils: ceilsObject,\n        boardWidth: newBoardWidth,\n        ceilSize: newCeilSize\n      })\n    }\n\n    init.bind(this);\n  }\n\n  getCeil = () => {\n    let ceilArray = [];\n    let f = 0;\n    for (let key of Object.keys(this.state.ceils)) {\n      f = this.state.ceils[key].mined ? f + 1 : f;\n      ceilArray.push(\n        <Ceil \n          key={key}\n          ceilCords={key}\n          ceilOptions={this.state.ceils[key]}\n          styleOptions={{width: this.state.ceilSize, height: this.state.ceilSize}}\n        />\n      );\n    }\n\n    console.log(f);\n\n    return ceilArray;\n  }\n\n  render () {\n\n    // console.log(this.state);\n    return (\n      <div className='board' style={{width: `${this.state.boardWidth}px`}}>\n\n        {this.state.boardWidth ? this.getCeil() : null}\n\n      </div>\n    );\n  }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}