{"ast":null,"code":"var _jsxFileName = \"/home/devhorse/Main/projects/REACT/miner/miner-game/src/game.js\";\nimport React from 'react';\nimport Board from './board';\nimport AsideMenu from './aside-menu';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      boardWidth: 0,\n      cellSize: 0,\n      gameOver: false,\n      gameWon: false,\n      gameInit: false,\n      cheatOn: false,\n      pause: false,\n      score: '',\n      idInitCell: '',\n      flags: {\n        set: 0,\n        all: 0\n      },\n      cells: {},\n      mines: {}\n    };\n\n    this.handleClick = (id, clickType) => {\n      if (!this.state.gameInit) {\n        this.gameInit(id);\n        return;\n      }\n\n      if (this.state.gameOver) {\n        return;\n      }\n\n      let currentCell = this.state.cells[id];\n\n      if (clickType === 'contextmenu') {\n        this.handleRightClick(id);\n        return;\n      }\n\n      if (!currentCell.opened) {\n        if (!currentCell.flagged) {\n          if (currentCell.mined) {\n            this.handleGameOver(id);\n          } else {\n            currentCell.opened = true;\n\n            if (!currentCell.minesAround > 0) {\n              let cellsAround = this.getMinesOrCellsAround(this.state.cells, currentCell.id, this.state.mines, 'cells');\n\n              for (let i = 0; i < cellsAround.length; i++) {\n                let cell = cellsAround[i];\n\n                if (!this.state.cells[cell].flagged && !this.state.cells[cell].opened) {\n                  this.handleClick(cell, 'click');\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.setState({\n        cells: { ...this.state.cells,\n          [id]: currentCell\n        }\n      });\n    };\n\n    this.handleRightClick = id => {\n      let currentCell = this.state.cells[id];\n\n      if (this.state.gameOver || currentCell.opened) {\n        return;\n      }\n\n      let newflags = { ...this.state.flags\n      };\n\n      if (!currentCell.flagged && this.state.flags.set < this.state.flags.all) {\n        currentCell.flagged = true;\n        newflags.set += 1;\n      } else if (currentCell.flagged) {\n        currentCell.flagged = false;\n        newflags.set -= 1;\n      } else {\n        return;\n      }\n\n      this.setState({\n        cells: { ...this.state.cells,\n          [id]: currentCell\n        },\n        flags: newflags\n      });\n    };\n\n    this.handleGameOver = id => {\n      let newMineCells = {};\n\n      for (let key of Object.keys(this.state.cells)) {\n        if (this.state.cells[key].mined) {\n          newMineCells[key] = this.state.cells[key];\n          newMineCells[key].opened = true;\n\n          if (id === key) {\n            newMineCells[key].loss = true;\n          }\n        }\n      }\n\n      this.setState({\n        cells: { ...this.state.cells,\n          ...newMineCells\n        },\n        gameOver: true\n      });\n    };\n\n    this.handleWon = () => {\n      let closedCellsCount = 0;\n\n      for (let key of Object.keys(this.state.cells)) {\n        if (!this.state.cells[key].opened) {\n          closedCellsCount++;\n        }\n      }\n\n      console.log(closedCellsCount);\n\n      if (closedCellsCount - this.state.flags.all === 0) {\n        this.setState({\n          gameWon: true\n        });\n      }\n    };\n\n    this.initBoard = () => {\n      const sizes = this.getBoardAndCellSize();\n      const newBoardWidth = sizes.boardWidth;\n      const cellsObject = this.getCells({});\n      this.setState({\n        boardWidth: newBoardWidth,\n        cellSize: sizes.cellSize,\n        cells: cellsObject\n      });\n    };\n\n    this.gameInit = id => {\n      // const sizes = this.getBoardAndCellSize();\n      // const newBoardWidth = sizes.boardWidth;\n      const minesObject = this.getRandomMines(id);\n      const cellsObject = this.getCells(minesObject, id);\n      const flagsAll = Object.keys(minesObject).length;\n\n      for (let cell of Object.keys(cellsObject)) {\n        if (!cellsObject[cell].mined) {\n          const newMinesAround = this.getMinesOrCellsAround(cellsObject, cell, minesObject, 'mines');\n          cellsObject[cell].minesAround = newMinesAround;\n        }\n      }\n\n      this.setState({\n        // boardWidth: newBoardWidth,\n        // cellSize: sizes.cellSize,\n        // gameOver: false,\n        // gameWon: false,\n        cells: cellsObject,\n        gameInit: true,\n        idInitCell: id,\n        flags: {\n          set: 0,\n          all: flagsAll\n        },\n        mines: minesObject\n      });\n    };\n\n    this.getMinesOrCellsAround = (cellsObject, cell, minesObject, mode) => {\n      let row = cellsObject[cell].row;\n      let col = cellsObject[cell].col;\n      let arroundCells = [col + 1 + '/' + row, col - 1 + '/' + row, col + '/' + (row + 1), col + '/' + (row - 1), col + 1 + '/' + (row + 1), col - 1 + '/' + (row - 1), col + 1 + '/' + (row - 1), col - 1 + '/' + (row + 1)];\n      let newMinesAround = 0;\n      let cellsAround = [];\n      arroundCells = arroundCells.forEach(item => {\n        let reg = new RegExp(`^(0\\/)|(\\/0)|(${+this.props.gameDifficult.width + 1}\\/)|(\\/${+this.props.gameDifficult.height + 1})`, 'g');\n\n        if (!item.match(reg)) {\n          if (mode === 'mines') {\n            newMinesAround = minesObject[item] ? newMinesAround += 1 : newMinesAround;\n          } else {\n            cellsAround.push(item);\n          }\n        } else {\n          if (mode === 'mines') {\n            newMinesAround = newMinesAround;\n          } else {\n            return;\n          }\n        }\n      });\n\n      if (mode === 'mines') {\n        return newMinesAround;\n      } else {\n        return cellsAround;\n      }\n    };\n\n    this.handleCheat = () => {\n      this.setState({\n        cheatOn: true\n      });\n    };\n\n    this.handleWonScore = time => {\n      this.setState({\n        score: time\n      });\n    };\n\n    this.restartGame = event => {\n      event.preventDefault(); // setTimeout(() => {\n      //   this.props.handleGameStatus({\n      //     width: this.props.gameDifficult.width,\n      //     height: this.props.gameDifficult.height\n      //   }, true);\n      // }, 1000);\n\n      this.props.handleGameStatus({}, false, {\n        width: this.props.gameDifficult.width,\n        height: this.props.gameDifficult.height\n      });\n    };\n\n    this.handlePause = () => {\n      this.setState({\n        pause: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.boardWidth === 0) {\n      this.initBoard();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.idInitCell && this.state.cells[this.state.idInitCell].opened === false) {\n      this.handleClick(this.state.idInitCell, 'click');\n    }\n\n    if (this.state.flags.all && this.state.flags.set === this.state.flags.all && !this.state.gameWon) {\n      this.handleWon();\n    }\n  }\n\n  getBoardAndCellSize() {\n    let newCellSize = 90;\n\n    if (this.props.gameDifficult.width === '16') {\n      newCellSize = 45;\n    } else if (this.props.gameDifficult.width === '30') {\n      newCellSize = 35;\n    }\n\n    return {\n      cellSize: newCellSize,\n      boardWidth: +this.props.gameDifficult.width * newCellSize + this.props.gameDifficult.width * 2\n    };\n  }\n\n  getRandomMines(id) {\n    const randomize = side => {\n      if (side === 'col') {\n        return Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n      } else if (side === 'row') {\n        return Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n      }\n    };\n\n    let mines = 0;\n\n    if (this.props.gameDifficult.width === '8') {\n      mines = 10;\n    } else if (this.props.gameDifficult.width === '16') {\n      mines = 40;\n    } else if (this.props.gameDifficult.width === '30') {\n      mines = 99;\n    }\n\n    const regCut = /[0-9]{1,2}/g;\n    const clickedRow = +id.match(regCut)[1];\n    const clickedCol = +id.match(regCut)[0];\n    const arrayOfCellsArround = Object.fromEntries([[clickedCol + 1 + '/' + clickedRow, true], [clickedCol - 1 + '/' + clickedRow, true], [clickedCol + '/' + (clickedRow + 1), true], [clickedCol + '/' + (clickedRow - 1), true], [clickedCol + 1 + '/' + (clickedRow + 1), true], [clickedCol - 1 + '/' + (clickedRow - 1), true], [clickedCol + 1 + '/' + (clickedRow - 1), true], [clickedCol - 1 + '/' + (clickedRow + 1), true], [clickedCol + '/' + clickedRow, true]]);\n    let minesObject = {};\n\n    for (let i = 1; i <= mines; i++) {\n      let randomCol = randomize('col');\n      let randomRow = randomize('row');\n\n      while (minesObject[randomCol + '/' + randomRow] || arrayOfCellsArround[randomCol + '/' + randomRow]) {\n        randomCol = randomize('col');\n        randomRow = randomize('row');\n      }\n\n      ;\n      minesObject[randomCol + '/' + randomRow] = true;\n    }\n\n    return minesObject;\n  }\n\n  getCells(minesObject, id) {\n    let cellsObject = {};\n\n    for (let row = 1; row <= this.props.gameDifficult.height; row++) {\n      for (let col = 1; col <= this.props.gameDifficult.width; col++) {\n        let isMined = minesObject[col + '/' + row] ? true : false;\n        cellsObject[col + '/' + row] = {\n          id: col + '/' + row,\n          row: row,\n          col: col,\n          mined: isMined,\n          opened: false,\n          flagged: false,\n          minesAround: 0,\n          loss: false\n        };\n      }\n    }\n\n    return cellsObject;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      gameState: this.state,\n      handleClick: this.handleClick,\n      gameOver: this.state.gameOver,\n      cheatOn: this.state.cheatOn,\n      gameWon: this.state.gameWon,\n      score: this.state.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(AsideMenu, {\n      handleGameStatus: this.props.handleGameStatus,\n      gameOver: this.state.gameOver,\n      gameWon: this.state.gameWon,\n      gameInit: this.state.gameInit,\n      flags: this.state.flags,\n      handleCheat: this.handleCheat,\n      handleWonScore: this.handleWonScore,\n      score: this.state.score,\n      restartGame: this.restartGame,\n      handlePause: this.handlePause,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/devhorse/Main/projects/REACT/miner/miner-game/src/game.js"],"names":["React","Board","AsideMenu","Game","Component","constructor","props","state","boardWidth","cellSize","gameOver","gameWon","gameInit","cheatOn","pause","score","idInitCell","flags","set","all","cells","mines","handleClick","id","clickType","currentCell","handleRightClick","opened","flagged","mined","handleGameOver","minesAround","cellsAround","getMinesOrCellsAround","i","length","cell","setState","newflags","newMineCells","key","Object","keys","loss","handleWon","closedCellsCount","console","log","initBoard","sizes","getBoardAndCellSize","newBoardWidth","cellsObject","getCells","minesObject","getRandomMines","flagsAll","newMinesAround","mode","row","col","arroundCells","forEach","item","reg","RegExp","gameDifficult","width","height","match","push","handleCheat","handleWonScore","time","restartGame","event","preventDefault","handleGameStatus","handlePause","componentDidMount","componentDidUpdate","newCellSize","randomize","side","Math","floor","random","regCut","clickedRow","clickedCol","arrayOfCellsArround","fromEntries","randomCol","randomRow","isMined","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './board';\nimport AsideMenu from './aside-menu';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  state = {\n    boardWidth: 0,\n    cellSize: 0,\n    gameOver: false,\n    gameWon: false,\n    gameInit: false,\n    cheatOn: false,\n    pause: false,\n    score: '',\n    idInitCell: '',\n    flags: {\n      set: 0,\n      all: 0 \n    },\n    cells: {},\n    mines: {}\n  }\n\n  componentDidMount() {\n    if (this.state.boardWidth === 0) {\n      this.initBoard();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.idInitCell && this.state.cells[this.state.idInitCell].opened === false) {\n      this.handleClick(this.state.idInitCell, 'click');\n    }\n    if (this.state.flags.all && this.state.flags.set === this.state.flags.all && !this.state.gameWon) {\n      this.handleWon();\n    }\n  }\n\n  handleClick = (id, clickType) => {\n    \n    if (!this.state.gameInit) {\n      this.gameInit(id);\n      return;\n    }\n\n    if (this.state.gameOver) {\n      return;\n    }\n\n    let currentCell = this.state.cells[id];\n\n    if ( clickType === 'contextmenu' ) {\n      this.handleRightClick(id);\n      return;\n    }\n\n    if (!currentCell.opened) {\n      if (!currentCell.flagged) {\n        if (currentCell.mined) {\n\n          this.handleGameOver(id);\n        } else {\n          currentCell.opened = true;\n\n          if (!currentCell.minesAround > 0) {\n            let cellsAround = this.getMinesOrCellsAround(this.state.cells, currentCell.id, this.state.mines, 'cells');\n\n            for( let i = 0; i < cellsAround.length; i++) {\n              let cell = cellsAround[i];\n              if (\n                !this.state.cells[cell].flagged && \n                !this.state.cells[cell].opened\n              ) {\n                this.handleClick(cell, 'click');\n              }\n            }\n          }\n        }\n      }\n    }\n  \n    this.setState({\n      cells: {\n        ...this.state.cells,\n        [id]: currentCell\n      } \n    })\n\n  }\n\n  handleRightClick = (id) => {\n    let currentCell = this.state.cells[id];\n\n    if (this.state.gameOver || currentCell.opened) {\n      return;\n    }\n\n    let newflags = {\n      ...this.state.flags\n    };\n\n    if (!currentCell.flagged && this.state.flags.set < this.state.flags.all) {\n      currentCell.flagged = true;\n      newflags.set += 1;\n    } else if (currentCell.flagged) {\n      currentCell.flagged = false;\n      newflags.set -= 1;\n    } else {\n      return;\n    }\n\n    this.setState({\n      cells: {\n        ...this.state.cells,\n        [id]: currentCell\n      },\n      flags: newflags\n    });\n  }\n\n  handleGameOver = (id) => {\n    let newMineCells = {};\n\n    for (let key of Object.keys(this.state.cells)) {\n      if (this.state.cells[key].mined) {\n        newMineCells[key] = this.state.cells[key];\n        newMineCells[key].opened = true;\n        if (id === key) {\n          newMineCells[key].loss = true;\n        }\n      }\n     \n    }\n\n    this.setState({\n      cells: {\n        ...this.state.cells,\n        ...newMineCells\n      },\n      gameOver: true\n    })\n  }\n\n  handleWon = () => {\n  \n    let closedCellsCount = 0;\n    \n    for (let key of Object.keys(this.state.cells)) {\n      if (!this.state.cells[key].opened) {\n        closedCellsCount++;\n      }\n    }\n\n    console.log(closedCellsCount);\n\n    if (closedCellsCount - this.state.flags.all === 0) {\n      this.setState({\n        gameWon: true\n      });\n    }\n  }\n\n  initBoard = () => {\n    const sizes = this.getBoardAndCellSize();\n    const newBoardWidth = sizes.boardWidth;\n    const cellsObject = this.getCells({});\n\n    this.setState({\n      boardWidth: newBoardWidth,\n      cellSize: sizes.cellSize,\n      cells: cellsObject\n    });\n  }\n\n  gameInit = (id) => {\n    // const sizes = this.getBoardAndCellSize();\n    // const newBoardWidth = sizes.boardWidth;\n    const minesObject = this.getRandomMines(id);\n    const cellsObject = this.getCells(minesObject, id);\n    const flagsAll = Object.keys(minesObject).length;\n\n    for (let cell of Object.keys(cellsObject)) {\n        if (!cellsObject[cell].mined) {\n\n          const newMinesAround = this.getMinesOrCellsAround(cellsObject, cell, minesObject, 'mines');\n          cellsObject[cell].minesAround = newMinesAround;\n        }\n    }\n\n    this.setState({\n      // boardWidth: newBoardWidth,\n      // cellSize: sizes.cellSize,\n      // gameOver: false,\n      // gameWon: false,\n      cells: cellsObject,\n      gameInit: true,\n      idInitCell: id,\n      flags: {\n        set: 0,\n        all: flagsAll\n      },\n      mines: minesObject\n    });\n  }\n\n  getBoardAndCellSize() {\n    let newCellSize = 90;\n\n    if (this.props.gameDifficult.width === '16') {\n      newCellSize = 45;\n    }  else if (this.props.gameDifficult.width === '30') {\n      newCellSize = 35;\n    }\n  \n    return {\n      cellSize: newCellSize,\n      boardWidth: +this.props.gameDifficult.width * newCellSize + (this.props.gameDifficult.width * 2)\n    }    \n  }\n\n  getRandomMines(id) {\n\n    const randomize = (side) => {\n      if (side === 'col') {\n        return Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n      } else if (side === 'row') {\n        return Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n      }\n    };\n\n    let mines = 0;\n\n    if (this.props.gameDifficult.width === '8') {\n      mines = 10;\n    } else if (this.props.gameDifficult.width === '16') {\n      mines = 40;\n    } else if (this.props.gameDifficult.width === '30') {\n      mines = 99;\n    }\n\n    const regCut = /[0-9]{1,2}/g;\n    const clickedRow = +id.match(regCut)[1];\n    const clickedCol = +id.match(regCut)[0];\n\n    const arrayOfCellsArround = Object.fromEntries([\n      [(clickedCol + 1) + '/' + (clickedRow), true],\n      [(clickedCol - 1) + '/' + (clickedRow), true],\n      [(clickedCol) + '/' + (clickedRow + 1), true],\n      [(clickedCol) + '/' + (clickedRow - 1), true],\n      [(clickedCol + 1) + '/' + (clickedRow + 1), true],\n      [(clickedCol - 1) + '/' + (clickedRow - 1), true],\n      [(clickedCol + 1) + '/' + (clickedRow - 1), true],\n      [(clickedCol - 1) + '/' + (clickedRow + 1), true],\n      [clickedCol + '/' + clickedRow, true]\n    ]);\n\n    let minesObject = {};\n\n    for (let i = 1; i <= mines; i++) {\n\n      let randomCol = randomize('col');\n      let randomRow = randomize('row');\n\n      while (\n        minesObject[randomCol + '/' + randomRow]\n        || \n        arrayOfCellsArround[randomCol + '/' + randomRow]\n      ) {\n        randomCol = randomize('col');\n        randomRow = randomize('row');\n      };\n\n      minesObject[randomCol + '/' + randomRow] = true;\n    }\n\n    return minesObject;\n  }\n\n  getCells(minesObject, id) {\n\n    let cellsObject = {};\n\n    for (let row = 1; row <= this.props.gameDifficult.height; row++) {\n      for (let col = 1; col <= this.props.gameDifficult.width; col++) {\n        let isMined = minesObject[col + '/' + row] ? true : false;\n\n        cellsObject[col + '/' + row] = {\n          id: col + '/' + row,\n          row: row,\n          col: col,\n          mined: isMined,\n          opened: false,\n          flagged: false,\n          minesAround: 0,\n          loss: false\n        };\n      }\n    }\n   \n    return cellsObject;\n  }\n\n  getMinesOrCellsAround = (cellsObject, cell, minesObject, mode) => {\n    let row = cellsObject[cell].row;\n    let col = cellsObject[cell].col;\n    \n    let arroundCells = [\n      (col + 1) + '/' + (row),\n      (col - 1) + '/' + (row),\n      (col) + '/' + (row + 1),\n      (col) + '/' + (row - 1),\n      (col + 1) + '/' + (row + 1),\n      (col - 1) + '/' + (row - 1),\n      (col + 1) + '/' + (row - 1),\n      (col - 1) + '/' + (row + 1)\n    ];\n\n    let newMinesAround = 0;\n    let cellsAround = [];\n\n    arroundCells = arroundCells.forEach(item => {\n\n      let reg = new RegExp(\n        `^(0\\/)|(\\/0)|(${+this.props.gameDifficult.width + 1}\\/)|(\\/${+this.props.gameDifficult.height + 1})`,\n        'g'\n      );\n  \n      if (!item.match(reg)) {\n        if (mode === 'mines') {\n          newMinesAround = minesObject[item] ?  newMinesAround += 1 : newMinesAround;\n        } else {\n          cellsAround.push(item);\n        }\n      } else {\n        if (mode === 'mines') {\n          newMinesAround = newMinesAround;\n        } else {\n          return;\n        }\n      }\n    });\n   \n    if (mode === 'mines') {\n      return newMinesAround;\n    } else {\n      return cellsAround;\n    }\n  }\n\n  handleCheat = () => {\n    this.setState({\n      cheatOn: true\n    });\n  } \n\n  handleWonScore = (time) => {\n    this.setState({\n      score: time\n    });\n  }\n\n  restartGame = (event) => {\n    event.preventDefault();\n\n    // setTimeout(() => {\n    //   this.props.handleGameStatus({\n    //     width: this.props.gameDifficult.width,\n    //     height: this.props.gameDifficult.height\n    //   }, true);\n    // }, 1000);\n\n    this.props.handleGameStatus({}, false, {\n      width: this.props.gameDifficult.width,\n      height: this.props.gameDifficult.height\n    });\n  }\n\n  handlePause = () => {\n    this.setState({pause: true});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Board\n         gameState={this.state} \n         handleClick={this.handleClick} \n         gameOver={this.state.gameOver}\n         cheatOn={this.state.cheatOn}\n         gameWon={this.state.gameWon}\n         score={this.state.score}\n        />\n\n        <AsideMenu\n         handleGameStatus={this.props.handleGameStatus} \n         gameOver={this.state.gameOver}\n         gameWon={this.state.gameWon}\n         gameInit={this.state.gameInit} \n         flags={this.state.flags}\n         handleCheat={this.handleCheat}\n         handleWonScore={this.handleWonScore}\n         score={this.state.score}\n         restartGame={this.restartGame}\n         handlePause={this.handlePause}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}