{"ast":null,"code":"var _jsxFileName = \"/home/devhorse/Main/projects/miner/miner-game/src/game.js\";\nimport React from 'react';\nimport Board from './board';\nimport AsideMenu from './aside-menu';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      boardWidth: 0,\n      cellSize: 0,\n      gameOver: false,\n      gameWon: false,\n      flags: {\n        set: 0,\n        all: 0\n      },\n      cells: {},\n      mines: {}\n    };\n\n    this.handleClick = (id, clickType) => {\n      if (this.state.gameOver) {\n        return;\n      }\n\n      let currentCell = this.state.cells[id];\n\n      if (clickType === 'contextmenu') {\n        this.handleRightClick(id);\n        return;\n      }\n\n      if (!currentCell.opened) {\n        if (!currentCell.flagged) {\n          if (currentCell.mined) {\n            this.handleGameOver(id);\n          } else {\n            currentCell.opened = true;\n\n            if (!currentCell.minesAround > 0) {\n              let cellsAround = this.getMinesOrCellsAround(this.state.cells, currentCell.id, this.state.mines, 'cells');\n\n              for (let i = 0; i < cellsAround.length; i++) {\n                let cell = cellsAround[i];\n\n                if (!this.state.cells[cell].flagged && !this.state.cells[cell].opened) {\n                  this.handleClick(cell, 'click');\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.setState({\n        cells: { ...this.state.cells,\n          [id]: currentCell\n        }\n      });\n    };\n\n    this.handleRightClick = id => {\n      let currentCell = this.state.cells[id];\n\n      if (this.state.gameOver || currentCell.opened) {\n        return;\n      }\n\n      let newflags = { ...this.state.flags\n      };\n\n      if (!currentCell.flagged && this.state.flags.set < this.state.flags.all) {\n        currentCell.flagged = true;\n        newflags.set += 1;\n      } else if (currentCell.flagged) {\n        currentCell.flagged = false;\n        newflags.set -= 1;\n      } else {\n        return;\n      }\n\n      this.setState({\n        cells: { ...this.state.cells,\n          [id]: currentCell\n        },\n        flags: newflags\n      });\n    };\n\n    this.handleGameOver = id => {\n      let newMineCells = {};\n\n      for (let key of Object.keys(this.state.cells)) {\n        if (this.state.cells[key].mined) {\n          newMineCells[key] = this.state.cells[key];\n          newMineCells[key].opened = true;\n\n          if (id === key) {\n            newMineCells[key].loss = true;\n          }\n        }\n      }\n\n      this.setState({\n        cells: { ...this.state.cells,\n          ...newMineCells\n        },\n        gameOver: true\n      });\n    };\n\n    this.gameInit = () => {\n      const sizes = this.getBoardAndCellSize();\n      const newBoardWidth = sizes.boardWidth;\n      const minesObject = this.getRandomMines();\n      const cellsObject = this.getCells(minesObject);\n      const flagsAll = Object.keys(minesObject).length;\n\n      for (let cell of Object.keys(cellsObject)) {\n        if (!cellsObject[cell].mined) {\n          const newMinesAround = this.getMinesOrCellsAround(cellsObject, cell, minesObject, 'mines');\n          cellsObject[cell].minesAround = newMinesAround;\n        }\n      }\n\n      this.setState({\n        boardWidth: newBoardWidth,\n        cellSize: sizes.cellSize,\n        cells: cellsObject,\n        gameOver: false,\n        gameWon: false,\n        flags: {\n          set: 0,\n          all: flagsAll\n        },\n        mines: minesObject\n      });\n    };\n\n    this.getMinesOrCellsAround = (cellsObject, cell, minesObject, mode) => {\n      let row = cellsObject[cell].row;\n      let col = cellsObject[cell].col;\n      let arroundCells = [col + 1 + '/' + row, col - 1 + '/' + row, col + '/' + (row + 1), col + '/' + (row - 1), col + 1 + '/' + (row + 1), col - 1 + '/' + (row - 1), col + 1 + '/' + (row - 1), col - 1 + '/' + (row + 1)];\n      let newMinesAround = 0;\n      let cellsAround = [];\n      arroundCells = arroundCells.forEach(item => {\n        let reg = new RegExp(`^(0\\/)|(\\/0)|(${+this.props.gameDifficult.width + 1}\\/)|(\\/${+this.props.gameDifficult.height + 1})`, 'g');\n\n        if (!item.match(reg)) {\n          if (mode === 'mines') {\n            newMinesAround = minesObject[item] ? newMinesAround += 1 : newMinesAround;\n          } else {\n            cellsAround.push(item);\n          }\n        } else {\n          if (mode === 'mines') {\n            newMinesAround = newMinesAround;\n          } else {\n            return;\n          }\n        }\n      });\n\n      if (mode === 'mines') {\n        return newMinesAround;\n      } else {\n        return cellsAround;\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.boardWidth === 0) {\n      this.gameInit();\n    }\n  }\n\n  getBoardAndCellSize() {\n    let newCellSize = 90;\n\n    if (this.props.gameDifficult.width === '16') {\n      newCellSize = 45;\n    } else if (this.props.gameDifficult.width === '30') {\n      newCellSize = 35;\n    }\n\n    return {\n      cellSize: newCellSize,\n      boardWidth: +this.props.gameDifficult.width * newCellSize + this.props.gameDifficult.width * 2\n    };\n  }\n\n  getRandomMines() {\n    let mines = 0;\n\n    if (this.props.gameDifficult.width === '8') {\n      mines = 10;\n    } else if (this.props.gameDifficult.width === '16') {\n      mines = 40;\n    } else if (this.props.gameDifficult.width === '30') {\n      mines = 99;\n    }\n\n    let minesObject = {};\n\n    for (let i = 1; i <= mines; i++) {\n      let randomCol = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n      let randomRow = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n\n      while (minesObject[randomCol + '/' + randomRow]) {\n        randomCol = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n        randomRow = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n      }\n\n      ;\n      minesObject[randomCol + '/' + randomRow] = true;\n    }\n\n    return minesObject;\n  }\n\n  getCells(minesObject) {\n    let cellsObject = {};\n\n    for (let row = 1; row <= this.props.gameDifficult.height; row++) {\n      for (let col = 1; col <= this.props.gameDifficult.width; col++) {\n        let isMined = minesObject[col + '/' + row] ? true : false;\n        cellsObject[col + '/' + row] = {\n          id: col + '/' + row,\n          row: row,\n          col: col,\n          mined: isMined,\n          opened: false,\n          flagged: false,\n          minesAround: 0,\n          loss: false\n        };\n      }\n    }\n\n    return cellsObject;\n  }\n\n  render() {\n    // console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      gameState: this.state,\n      handleClick: this.handleClick,\n      gameOver: this.state.gameOver,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(AsideMenu, {\n      handleGameStatus: this.props.handleGameStatus,\n      gameOver: this.state.gameOver,\n      flags: this.state.flags,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/devhorse/Main/projects/miner/miner-game/src/game.js"],"names":["React","Board","AsideMenu","Game","Component","constructor","props","state","boardWidth","cellSize","gameOver","gameWon","flags","set","all","cells","mines","handleClick","id","clickType","currentCell","handleRightClick","opened","flagged","mined","handleGameOver","minesAround","cellsAround","getMinesOrCellsAround","i","length","cell","setState","newflags","newMineCells","key","Object","keys","loss","gameInit","sizes","getBoardAndCellSize","newBoardWidth","minesObject","getRandomMines","cellsObject","getCells","flagsAll","newMinesAround","mode","row","col","arroundCells","forEach","item","reg","RegExp","gameDifficult","width","height","match","push","componentDidMount","newCellSize","randomCol","Math","floor","random","randomRow","isMined","render","handleGameStatus"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './board';\nimport AsideMenu from './aside-menu';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  state = {\n    boardWidth: 0,\n    cellSize: 0,\n    gameOver: false,\n    gameWon: false,\n    flags: {\n      set: 0,\n      all: 0 \n    },\n    cells: {},\n    mines: {}\n  }\n\n  componentDidMount() {\n    if (this.state.boardWidth === 0) {\n      this.gameInit();\n    }\n  }\n\n  handleClick = (id, clickType) => {\n    \n    if (this.state.gameOver) {\n      return;\n    }\n\n    let currentCell = this.state.cells[id];\n\n    if ( clickType === 'contextmenu' ) {\n      this.handleRightClick(id);\n      return;\n    }\n\n    if (!currentCell.opened) {\n      if (!currentCell.flagged) {\n        if (currentCell.mined) {\n\n          this.handleGameOver(id);\n        } else {\n          currentCell.opened = true;\n\n          if (!currentCell.minesAround > 0) {\n            let cellsAround = this.getMinesOrCellsAround(this.state.cells, currentCell.id, this.state.mines, 'cells');\n\n            for( let i = 0; i < cellsAround.length; i++) {\n              let cell = cellsAround[i];\n              if (\n                !this.state.cells[cell].flagged && \n                !this.state.cells[cell].opened\n              ) {\n                this.handleClick(cell, 'click');\n              }\n            }\n          }\n        }\n      }\n    }\n  \n    this.setState({\n      cells: {\n        ...this.state.cells,\n        [id]: currentCell\n      } \n    })\n\n  }\n\n  handleRightClick = (id) => {\n    let currentCell = this.state.cells[id];\n\n    if (this.state.gameOver || currentCell.opened) {\n      return;\n    }\n\n    let newflags = {\n      ...this.state.flags\n    };\n\n    if (!currentCell.flagged && this.state.flags.set < this.state.flags.all) {\n      currentCell.flagged = true;\n      newflags.set += 1;\n    } else if (currentCell.flagged) {\n      currentCell.flagged = false;\n      newflags.set -= 1;\n    } else {\n      return;\n    }\n\n    this.setState({\n      cells: {\n        ...this.state.cells,\n        [id]: currentCell\n      },\n      flags: newflags\n    });\n  }\n\n  handleGameOver = (id) => {\n    let newMineCells = {};\n\n    for (let key of Object.keys(this.state.cells)) {\n      if (this.state.cells[key].mined) {\n        newMineCells[key] = this.state.cells[key];\n        newMineCells[key].opened = true;\n        if (id === key) {\n          newMineCells[key].loss = true;\n        }\n      }\n     \n    }\n\n    this.setState({\n      cells: {\n        ...this.state.cells,\n        ...newMineCells\n      },\n      gameOver: true\n    })\n  }\n\n  gameInit = () => {\n    const sizes = this.getBoardAndCellSize();\n    const newBoardWidth = sizes.boardWidth;\n    const minesObject = this.getRandomMines();\n    const cellsObject = this.getCells(minesObject);\n    const flagsAll = Object.keys(minesObject).length;\n\n    for (let cell of Object.keys(cellsObject)) {\n        if (!cellsObject[cell].mined) {\n\n          const newMinesAround = this.getMinesOrCellsAround(cellsObject, cell, minesObject, 'mines');\n          cellsObject[cell].minesAround = newMinesAround;\n        }\n    }\n\n    this.setState({\n      boardWidth: newBoardWidth,\n      cellSize: sizes.cellSize,\n      cells: cellsObject,\n      gameOver: false,\n      gameWon: false,\n      flags: {\n        set: 0,\n        all: flagsAll\n      },\n      mines: minesObject\n    });\n  }\n\n  getBoardAndCellSize() {\n    let newCellSize = 90;\n\n    if (this.props.gameDifficult.width === '16') {\n      newCellSize = 45;\n    }  else if (this.props.gameDifficult.width === '30') {\n      newCellSize = 35;\n    }\n  \n    return {\n      cellSize: newCellSize,\n      boardWidth: +this.props.gameDifficult.width * newCellSize + (this.props.gameDifficult.width * 2)\n    }    \n  }\n\n  getRandomMines() {\n\n    let mines = 0;\n\n    if (this.props.gameDifficult.width === '8') {\n      mines = 10;\n    } else if (this.props.gameDifficult.width === '16') {\n      mines = 40;\n    } else if (this.props.gameDifficult.width === '30') {\n      mines = 99;\n    }\n\n    let minesObject = {};\n\n    for (let i = 1; i <= mines; i++) {\n      let randomCol = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n      let randomRow = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n      while (minesObject[randomCol + '/' + randomRow]) {\n        randomCol = Math.floor(Math.random() * this.props.gameDifficult.width + 1);\n        randomRow = Math.floor(Math.random() * this.props.gameDifficult.height + 1);\n      };\n      minesObject[randomCol + '/' + randomRow] = true;\n    }\n\n    return minesObject;\n  }\n\n  getCells(minesObject) {\n\n    let cellsObject = {};\n\n    for (let row = 1; row <= this.props.gameDifficult.height; row++) {\n      for (let col = 1; col <= this.props.gameDifficult.width; col++) {\n        let isMined = minesObject[col + '/' + row] ? true : false;\n\n        cellsObject[col + '/' + row] = {\n          id: col + '/' + row,\n          row: row,\n          col: col,\n          mined: isMined,\n          opened: false,\n          flagged: false,\n          minesAround: 0,\n          loss: false\n        };\n      }\n    }\n\n    return cellsObject;\n  }\n\n  getMinesOrCellsAround = (cellsObject, cell, minesObject, mode) => {\n    let row = cellsObject[cell].row;\n    let col = cellsObject[cell].col;\n    \n    let arroundCells = [\n      (col + 1) + '/' + (row),\n      (col - 1) + '/' + (row),\n      (col) + '/' + (row + 1),\n      (col) + '/' + (row - 1),\n      (col + 1) + '/' + (row + 1),\n      (col - 1) + '/' + (row - 1),\n      (col + 1) + '/' + (row - 1),\n      (col - 1) + '/' + (row + 1)\n    ];\n\n    let newMinesAround = 0;\n    let cellsAround = [];\n\n    arroundCells = arroundCells.forEach(item => {\n\n      let reg = new RegExp(\n        `^(0\\/)|(\\/0)|(${+this.props.gameDifficult.width + 1}\\/)|(\\/${+this.props.gameDifficult.height + 1})`,\n        'g'\n      );\n  \n      if (!item.match(reg)) {\n        if (mode === 'mines') {\n          newMinesAround = minesObject[item] ?  newMinesAround += 1 : newMinesAround;\n        } else {\n          cellsAround.push(item);\n        }\n      } else {\n        if (mode === 'mines') {\n          newMinesAround = newMinesAround;\n        } else {\n          return;\n        }\n      }\n    });\n   \n    if (mode === 'mines') {\n      return newMinesAround;\n    } else {\n      return cellsAround;\n    }\n  }\n\n  render() {\n\n    // console.log(this.state);\n    return (\n      <div className=\"container\">\n        <Board gameState={this.state} handleClick={this.handleClick} gameOver={this.state.gameOver} />\n        <AsideMenu handleGameStatus={this.props.handleGameStatus} gameOver={this.state.gameOver} flags={this.state.flags}/>\n      </div>\n    );\n  }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}